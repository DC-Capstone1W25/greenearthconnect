{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "436ba7aa-e2cd-4d33-9bcf-e69e2f47f733",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# Generate synthetic dataset\n",
    "np.random.seed(42)\n",
    "num_samples = 10000\n",
    "\n",
    "data = {\n",
    "    \"PM2.5\": np.random.uniform(5, 200, num_samples),\n",
    "    \"PM10\": np.random.uniform(10, 250, num_samples),\n",
    "    \"NO2\": np.random.uniform(5, 150, num_samples),\n",
    "    \"O3\": np.random.uniform(5, 120, num_samples),\n",
    "    \"CO\": np.random.uniform(0.1, 15, num_samples),\n",
    "    \"Temperature\": np.random.uniform(-10, 40, num_samples),\n",
    "    \"Humidity\": np.random.uniform(10, 90, num_samples),\n",
    "    \"Wind Speed\": np.random.uniform(0, 20, num_samples),\n",
    "    \"Pressure\": np.random.uniform(900, 1050, num_samples),\n",
    "    \"Precipitation\": np.random.uniform(0, 50, num_samples),\n",
    "    \"Traffic Congestion Index\": np.random.uniform(0, 100, num_samples),\n",
    "    \"Day of Week\": np.random.randint(0, 7, num_samples),\n",
    "    \"Hour of Day\": np.random.randint(0, 24, num_samples),\n",
    "    \"Season\": np.random.randint(1, 5, num_samples),\n",
    "    \"AQI\": np.random.randint(0, 500, num_samples)  # Target variable\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Split data into train and test sets\n",
    "X = df.drop(columns=[\"AQI\"])\n",
    "y = df[\"AQI\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train Random Forest Regressor\n",
    "rf = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# Predict\n",
    "y_pred = rf.predict(X_test)\n",
    "\n",
    "# Evaluate Model\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Mean Squared Error: {mse}\")\n",
    "print(f\"RÂ² Score: {r2}\")\n",
    "\n",
    "# Function to categorize AQI levels\n",
    "def classify_aqi(aqi):\n",
    "    if aqi <= 50:\n",
    "        return \"Good\"\n",
    "    elif aqi <= 100:\n",
    "        return \"Moderate\"\n",
    "    elif aqi <= 150:\n",
    "        return \"Unhealthy for Sensitive Groups\"\n",
    "    elif aqi <= 200:\n",
    "        return \"Unhealthy\"\n",
    "    elif aqi <= 300:\n",
    "        return \"Very Unhealthy\"\n",
    "    else:\n",
    "        return \"Hazardous\"\n",
    "\n",
    "# Predict AQI for a new sample\n",
    "sample_data = {\n",
    "    \"PM2.5\": [30],\n",
    "    \"PM10\": [50],\n",
    "    \"NO2\": [40],\n",
    "    \"O3\": [20],\n",
    "    \"CO\": [1],\n",
    "    \"Temperature\": [25],\n",
    "    \"Humidity\": [60],\n",
    "    \"Wind Speed\": [5],\n",
    "    \"Pressure\": [1010],\n",
    "    \"Precipitation\": [2],\n",
    "    \"Traffic Congestion Index\": [30],\n",
    "    \"Day of Week\": [3],\n",
    "    \"Hour of Day\": [14],\n",
    "    \"Season\": [2]\n",
    "}\n",
    "\n",
    "sample_df = pd.DataFrame(sample_data)\n",
    "predicted_aqi = rf.predict(sample_df)[0]\n",
    "aqi_category = classify_aqi(predicted_aqi)\n",
    "\n",
    "print(f\"Predicted AQI: {predicted_aqi:.2f}\")\n",
    "print(f\"Air Quality Level: {aqi_category}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
